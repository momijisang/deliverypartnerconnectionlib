// Code generated by MockGen. DO NOT EDIT.
// Source: port.go
//
// Generated by this command:
//
//	mockgen -source=port.go -package=dhl -destination=port_mock_test.go
//

// Package dhl is a generated GoMock package.
package dhl

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticator) Authenticate() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticatorMockRecorder) Authenticate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticator)(nil).Authenticate))
}

// MockDHLOrderCreatorAPI is a mock of DHLOrderCreatorAPI interface.
type MockDHLOrderCreatorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDHLOrderCreatorAPIMockRecorder
}

// MockDHLOrderCreatorAPIMockRecorder is the mock recorder for MockDHLOrderCreatorAPI.
type MockDHLOrderCreatorAPIMockRecorder struct {
	mock *MockDHLOrderCreatorAPI
}

// NewMockDHLOrderCreatorAPI creates a new mock instance.
func NewMockDHLOrderCreatorAPI(ctrl *gomock.Controller) *MockDHLOrderCreatorAPI {
	mock := &MockDHLOrderCreatorAPI{ctrl: ctrl}
	mock.recorder = &MockDHLOrderCreatorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDHLOrderCreatorAPI) EXPECT() *MockDHLOrderCreatorAPIMockRecorder {
	return m.recorder
}

// Post mocks base method.
func (m *MockDHLOrderCreatorAPI) Post(headers map[string]string, request DHLCreateOrderAPIRequest) (DHLCreateOrderAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", headers, request)
	ret0, _ := ret[0].(DHLCreateOrderAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockDHLOrderCreatorAPIMockRecorder) Post(headers, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockDHLOrderCreatorAPI)(nil).Post), headers, request)
}

// MockDHLAuthenticationAPI is a mock of DHLAuthenticationAPI interface.
type MockDHLAuthenticationAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDHLAuthenticationAPIMockRecorder
}

// MockDHLAuthenticationAPIMockRecorder is the mock recorder for MockDHLAuthenticationAPI.
type MockDHLAuthenticationAPIMockRecorder struct {
	mock *MockDHLAuthenticationAPI
}

// NewMockDHLAuthenticationAPI creates a new mock instance.
func NewMockDHLAuthenticationAPI(ctrl *gomock.Controller) *MockDHLAuthenticationAPI {
	mock := &MockDHLAuthenticationAPI{ctrl: ctrl}
	mock.recorder = &MockDHLAuthenticationAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDHLAuthenticationAPI) EXPECT() *MockDHLAuthenticationAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDHLAuthenticationAPI) Get(headers map[string]string, queryParam string, request DHLAuthenticationAPIRequest) (DHLAuthenticationAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", headers, queryParam, request)
	ret0, _ := ret[0].(DHLAuthenticationAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDHLAuthenticationAPIMockRecorder) Get(headers, queryParam, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDHLAuthenticationAPI)(nil).Get), headers, queryParam, request)
}
