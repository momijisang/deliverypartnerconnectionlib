// Code generated by MockGen. DO NOT EDIT.
// Source: port.go
//
// Generated by this command:
//
//	mockgen -source=port.go -package=shopee -destination=port_mock_test.go
//

// Package shopee is a generated GoMock package.
package shopee

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockShoppeeCreateOrderAPI is a mock of ShoppeeCreateOrderAPI interface.
type MockShoppeeCreateOrderAPI struct {
	ctrl     *gomock.Controller
	recorder *MockShoppeeCreateOrderAPIMockRecorder
}

// MockShoppeeCreateOrderAPIMockRecorder is the mock recorder for MockShoppeeCreateOrderAPI.
type MockShoppeeCreateOrderAPIMockRecorder struct {
	mock *MockShoppeeCreateOrderAPI
}

// NewMockShoppeeCreateOrderAPI creates a new mock instance.
func NewMockShoppeeCreateOrderAPI(ctrl *gomock.Controller) *MockShoppeeCreateOrderAPI {
	mock := &MockShoppeeCreateOrderAPI{ctrl: ctrl}
	mock.recorder = &MockShoppeeCreateOrderAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShoppeeCreateOrderAPI) EXPECT() *MockShoppeeCreateOrderAPIMockRecorder {
	return m.recorder
}

// Post mocks base method.
func (m *MockShoppeeCreateOrderAPI) Post(endpoint string, headers map[string]string, request CreateOrderRequest) (CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", endpoint, headers, request)
	ret0, _ := ret[0].(CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockShoppeeCreateOrderAPIMockRecorder) Post(endpoint, headers, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockShoppeeCreateOrderAPI)(nil).Post), endpoint, headers, request)
}

// MockShopeePickUpTimeAPI is a mock of ShopeePickUpTimeAPI interface.
type MockShopeePickUpTimeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockShopeePickUpTimeAPIMockRecorder
}

// MockShopeePickUpTimeAPIMockRecorder is the mock recorder for MockShopeePickUpTimeAPI.
type MockShopeePickUpTimeAPIMockRecorder struct {
	mock *MockShopeePickUpTimeAPI
}

// NewMockShopeePickUpTimeAPI creates a new mock instance.
func NewMockShopeePickUpTimeAPI(ctrl *gomock.Controller) *MockShopeePickUpTimeAPI {
	mock := &MockShopeePickUpTimeAPI{ctrl: ctrl}
	mock.recorder = &MockShopeePickUpTimeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopeePickUpTimeAPI) EXPECT() *MockShopeePickUpTimeAPIMockRecorder {
	return m.recorder
}

// Post mocks base method.
func (m *MockShopeePickUpTimeAPI) Post(endpoint string, headers map[string]string, request TimeSlotRequest) (TimeSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", endpoint, headers, request)
	ret0, _ := ret[0].(TimeSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockShopeePickUpTimeAPIMockRecorder) Post(endpoint, headers, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockShopeePickUpTimeAPI)(nil).Post), endpoint, headers, request)
}

// MockShopeeUpdateOrderAPI is a mock of ShopeeUpdateOrderAPI interface.
type MockShopeeUpdateOrderAPI struct {
	ctrl     *gomock.Controller
	recorder *MockShopeeUpdateOrderAPIMockRecorder
}

// MockShopeeUpdateOrderAPIMockRecorder is the mock recorder for MockShopeeUpdateOrderAPI.
type MockShopeeUpdateOrderAPIMockRecorder struct {
	mock *MockShopeeUpdateOrderAPI
}

// NewMockShopeeUpdateOrderAPI creates a new mock instance.
func NewMockShopeeUpdateOrderAPI(ctrl *gomock.Controller) *MockShopeeUpdateOrderAPI {
	mock := &MockShopeeUpdateOrderAPI{ctrl: ctrl}
	mock.recorder = &MockShopeeUpdateOrderAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopeeUpdateOrderAPI) EXPECT() *MockShopeeUpdateOrderAPIMockRecorder {
	return m.recorder
}

// Post mocks base method.
func (m *MockShopeeUpdateOrderAPI) Post(endpoint string, headers map[string]string, request UpdateOrderRequest) (UpdateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", endpoint, headers, request)
	ret0, _ := ret[0].(UpdateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockShopeeUpdateOrderAPIMockRecorder) Post(endpoint, headers, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockShopeeUpdateOrderAPI)(nil).Post), endpoint, headers, request)
}

// MockShopeeCancelOrderAPI is a mock of ShopeeCancelOrderAPI interface.
type MockShopeeCancelOrderAPI struct {
	ctrl     *gomock.Controller
	recorder *MockShopeeCancelOrderAPIMockRecorder
}

// MockShopeeCancelOrderAPIMockRecorder is the mock recorder for MockShopeeCancelOrderAPI.
type MockShopeeCancelOrderAPIMockRecorder struct {
	mock *MockShopeeCancelOrderAPI
}

// NewMockShopeeCancelOrderAPI creates a new mock instance.
func NewMockShopeeCancelOrderAPI(ctrl *gomock.Controller) *MockShopeeCancelOrderAPI {
	mock := &MockShopeeCancelOrderAPI{ctrl: ctrl}
	mock.recorder = &MockShopeeCancelOrderAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopeeCancelOrderAPI) EXPECT() *MockShopeeCancelOrderAPIMockRecorder {
	return m.recorder
}

// Post mocks base method.
func (m *MockShopeeCancelOrderAPI) Post(endpoint string, headers map[string]string, request CancelOrderRequest) (CancelOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", endpoint, headers, request)
	ret0, _ := ret[0].(CancelOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockShopeeCancelOrderAPIMockRecorder) Post(endpoint, headers, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockShopeeCancelOrderAPI)(nil).Post), endpoint, headers, request)
}
