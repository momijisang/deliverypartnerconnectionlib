// Code generated by MockGen. DO NOT EDIT.
// Source: port.go
//
// Generated by this command:
//
//	mockgen -source=port.go -package=courierx -destination=port_mock_test.go
//

// Package courierx is a generated GoMock package.
package courierx

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderCreator is a mock of OrderCreator interface.
type MockOrderCreator struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCreatorMockRecorder
}

// MockOrderCreatorMockRecorder is the mock recorder for MockOrderCreator.
type MockOrderCreatorMockRecorder struct {
	mock *MockOrderCreator
}

// NewMockOrderCreator creates a new mock instance.
func NewMockOrderCreator(ctrl *gomock.Controller) *MockOrderCreator {
	mock := &MockOrderCreator{ctrl: ctrl}
	mock.recorder = &MockOrderCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCreator) EXPECT() *MockOrderCreatorMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderCreator) CreateOrder(order Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderCreatorMockRecorder) CreateOrder(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderCreator)(nil).CreateOrder), order)
}

// MockOrderUpdator is a mock of OrderUpdator interface.
type MockOrderUpdator struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUpdatorMockRecorder
}

// MockOrderUpdatorMockRecorder is the mock recorder for MockOrderUpdator.
type MockOrderUpdatorMockRecorder struct {
	mock *MockOrderUpdator
}

// NewMockOrderUpdator creates a new mock instance.
func NewMockOrderUpdator(ctrl *gomock.Controller) *MockOrderUpdator {
	mock := &MockOrderUpdator{ctrl: ctrl}
	mock.recorder = &MockOrderUpdatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUpdator) EXPECT() *MockOrderUpdatorMockRecorder {
	return m.recorder
}

// UpdateOrder mocks base method.
func (m *MockOrderUpdator) UpdateOrder(trackingNo string, order Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", trackingNo, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderUpdatorMockRecorder) UpdateOrder(trackingNo, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderUpdator)(nil).UpdateOrder), trackingNo, order)
}
